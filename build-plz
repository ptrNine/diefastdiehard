#!/bin/bash

colored() {
    if [ -t 1 ]; then
        local black='0;30' red='0;31'     green='0;32'  orange='0;33' \
              blue='0;34'  purple='0;35'  cyan='0;36'   lgray='0;37' \
              dgray='1;30' lred='1;31'    lgreen='1;32' yellow='1;33' \
              lblue='1;34' lpurple='1;35' lcyan='1;36'  white='1;37'
        echo -en "\e[${!1}m$2\e[0m"
    else
        echo -n "$2"
    fi

    [ -z "$3" ] && echo
}

fail() {
    colored red "$1" 1>&2
    exit 1
}

progress() {
    while kill -0 "$1" &>/dev/null; do
        local tm="$(date +%S)"
        case $((tm%3)) in
            0)
                colored "$2" "$3 .  " ret
                ;;
            1)
                colored "$2" "$3 .. " ret
                ;;
            2)
                colored "$2" "$3 ..." ret
                ;;
        esac
        sleep 1
    done
    printf '\n'
}

mstime() {
    echo $(($(date +%s%N)/1000000))
}

measure() {
    local start_tm=$1
    echo "scale=2; $(($(mstime) - start_tm))/1000" | bc -l
}

declare -A INCLUDE_MAP

_include_scan() {
    local fname="$1"
    local cur_dir="$2"
    for f in $(cat "$fname" 2>/dev/null | grep -E "^[ \t]*#include[ \t]+\"" 2>/dev/null); do
        [ $f = '#include' ] && continue

        f="${f#*\"}"
        f="${f%*\"}"

        local current_fname="$cur_dir/$f"
        current_fname="${current_fname#./}"
        current_fname="${current_fname#/}"

        [ -z "${INCLUDE_MAP[$current_fname]}" ] && \
            INCLUDE_MAP["$current_fname"]=true || \
            continue

        echo "$current_fname"

        local current_dir="$(dirname "$current_fname")"
        current_dir="${current_dir#./}"

        _include_scan "$current_fname" "$current_dir"
    done | sort | uniq
}

include_scan() {
    echo "$1"
    _include_scan "$1" "$(dirname "$1")"
    declare -A INCLUDE_MAP
}

build_static_lib() {
    local name="$1"
    local build_source="$2"
    local builddir="$3"
    local CXX_COMPILER="$4"
    local debug="$5"
    local flags="$6"
    local libs="$7"

    local list="$builddir/.ezbld/$name-list" newlist="$builddir/.ezbld/new-$name-list"

    rm -f "$newlist"
    for f in $(include_scan "$build_source"); do
        stat --printf="%Y:%n\n" "$f" >> "$newlist"
    done

    if [ ! -f "$list" ] || \
        ! cmp --silent "$list" "$newlist"; then
        rm -f "$builddir/$name-list"

        local start_tm=$(mstime)
        colored yellow "Building lib$name.a ... " n

        local cmd="$(command -v "$CXX_COMPILER") -c -std=c++20 \
            $([ "$debug" == true ] && echo "-O0 -g" || echo "-O2 -march=native") \
            $flags \
            -L '$(pwd)/$builddir/3rd/lib' \
            -L '$(pwd)/$builddir/3rd/lib64' \
            -L '$(pwd)/$builddir' \
            -L '$(pwd)/$builddir/submodules/luacpp/3rd/lib64' \
            -L '$(pwd)/$builddir/submodules/luacpp/3rd/lib' \
            -isystem '$(pwd)/$builddir/submodules/luacpp/3rd/include/luajit-2.1' \
            -isystem '$(pwd)/$builddir/3rd/include' '$(pwd)/$build_source' \
            -o '$(pwd)/$builddir/$name.o' \
            $libs"
        cmd="$(echo "$cmd" | sed 's/  */ /g' | tr '\n' ' ')"

        eval $cmd || fail "Build failed"

        ar rcs "$(pwd)/$builddir/lib$name.a" "$(pwd)/$builddir/$name.o" || fail "Build failed"
        rm -f "$builddir/$name.o"

        mv -f "$newlist" "$list"
        printf '%s\n%s\n' "source=\"$(pwd)/$build_source\"" "command=\"$cmd\"" > "$builddir/.ezbld/$name-command"

        colored lgreen "done! $(measure $start_tm)s"
    else
        colored lpurple "lib$name.a already built"
        rm -f "$newlist"
    fi
}

build_executable() {
    local name="$1"
    local build_source="$2"
    local builddir="$3"
    local CXX_COMPILER="$4"
    local debug="$5"
    local flags="$6"
    local libs="$7"

    if [ ! -z "$TARGET" ] && [ "$TARGET" != "$name" ]; then
        return
    fi

    local list="$builddir/.ezbld/$name-list" newlist="$builddir/.ezbld/new-$name-list"

    rm -f "$newlist"
    for f in $(include_scan "$build_source"); do
        stat --printf="%Y:%n\n" "$f" >> "$newlist"
    done

    if [ ! -f "$list" ] || \
        ! cmp --silent "$list" "$newlist"; then
        rm -f "$list"

        local start_tm=$(mstime)
        colored yellow "Building $name ... " n
        local cmd="$(command -v "$CXX_COMPILER") -std=c++20 \
            $([ "$debug" == true ] && echo "-O0 -g" || echo "-O2 -march=native") \
            $flags \
            -L '$(pwd)/$builddir/3rd/lib' \
            -L '$(pwd)/$builddir/3rd/lib64' \
            -L '$(pwd)/$builddir' \
            -L '$(pwd)/$builddir/submodules/luacpp/3rd/lib64' \
            -L '$(pwd)/$builddir/submodules/luacpp/3rd/lib' \
            -isystem '$(pwd)/$builddir/submodules/luacpp/3rd/include/luajit-2.1' \
            -isystem '$(pwd)/$builddir/3rd/include' '$(pwd)/$build_source' \
            -o '$(pwd)/$builddir/$name' \
            $libs"
        cmd="$(echo "$cmd" | sed 's/  */ /g' | tr '\n' ' ')"

        eval $cmd || fail "Build failed"
        mv -f "$newlist" "$list"
        printf '%s\n%s\n' "source=\"$(pwd)/$build_source\"" "command=\"$cmd\"" > "$builddir/.ezbld/$name-command"

        colored lgreen "done! $(measure $start_tm)s"
    else
        colored lpurple "$name already built"
        rm -f "$newlist"
    fi
}

codegen_step() {
    local builddir="$1"
    local CXX_COMPILER="$2"
    local input_header="$3"
    local generator_name="$4"
    local generator_cpp="$5"
    local output_header="$6"

    local deps_list="$builddir/.ezbld/$generator_name-codegen-list"
    local new_deps_list="$builddir/.ezbld/new-$generator_name-codegen-list"

    rm -f "$new_deps_list"
    for f in $(include_scan "$generator_cpp"); do
        stat --printf="%Y:%n\n" "$f" >> "$new_deps_list"
    done
    stat --printf="%Y:%n\n" "$input_header" >> "$new_deps_list"

    if [ ! -f "$deps_list" ] || \
        ! cmp --silent "$deps_list" "$new_deps_list"; then
        rm -f "$deps_list"

        build_executable \
            "$generator_name" \
            "$generator_cpp" \
            "$builddir" \
            "$CXX_COMPILER" \
            false

        local start_tm=$(mstime)
        colored yellow "Generating $output_header ... " n
        $CXX_COMPILER -E \
            -isystem "$(pwd)/$builddir/3rd/include" \
            -isystem "$(pwd)/$builddir/submodules/luacpp/3rd/include/luajit-2.1" \
            "$input_header" 2>/dev/null | "$builddir/$generator_name" > "$output_header" \
            || fail "Generation of $output_header failed"
        colored lgreen "done! $(measure $start_tm)s"

        mv -f "$new_deps_list" "$deps_list"
    fi
}

make_pch() {
    local location="$1"
    local builddir="$2"
    local CXX_COMPILER="$3"
    local debug="$4"
    local flags="$5"
    local name='PCH'

    [ -f "$location" ] || return 0

    local list="$builddir/.ezbld/$name-list" newlist="$builddir/.ezbld/new-$name-list"

    rm -f "$newlist"
    for f in $(include_scan "$location"); do
        stat --printf="%Y:%n\n" "$f" >> "$newlist"
    done

    if [ ! -f "$list" ] || \
        ! cmp --silent "$list" "$newlist" || \
        [ "$(cat "$location.gch.builddir" 2>/dev/null)" != "$builddir" ] || \
        [ ! -f "$location.gch" ]; then
        rm -f "$list"

        local start_tm=$(mstime)
        colored yellow "Making precompiled header $location ... " n
        local cmd="$(command -v "$CXX_COMPILER") -std=c++20 -c \
            $([ "$debug" == true ] && echo "-O0 -g" || echo "-O2 -march=native") \
            $flags \
            -L '$(pwd)/$builddir/3rd/lib' \
            -L '$(pwd)/$builddir/3rd/lib64' \
            -L '$(pwd)/$builddir' \
            -L '$(pwd)/$builddir/submodules/luacpp/3rd/lib64' \
            -L '$(pwd)/$builddir/submodules/luacpp/3rd/lib' \
            -isystem '$(pwd)/$builddir/3rd/include' \
            -isystem '$(pwd)/$builddir/submodules/luacpp/3rd/include/luajit-2.1' \
            '$(pwd)/$location' \
            -o $location.gch"
        cmd="$(echo "$cmd" | sed 's/  */ /g' | tr '\n' ' ')"

        eval $cmd || fail " Failed"

        mv -f "$newlist" "$list"
        echo "$builddir" > "$location.gch.builddir"

        MAKED_PCH="$location"

        colored lgreen "done! $(measure $start_tm)s"
    else
        colored lpurple "$name already built"
        rm -f "$newlist"
    fi
}

build_cmake_submodule() {
    local builddir="$1"; shift
    local rebuild_submodules="$1"; shift
    local submodule="$1"; shift

    mkdir -p "$builddir/submodules/$submodule"

    if [ ! -f "$builddir/submodules/$submodule/.easybuild_done" ] || [ "$rebuild_submodules" == true ]; then
        git submodule init "submodules/$submodule" || fail
        git submodule update --init --recursive "submodules/$submodule" || fail
        rm -f "$builddir/submodules/$submodule/.easybuild_done"
        cmake "submodules/$submodule/" -B "$builddir/submodules/$submodule" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER="$C_COMPILER" \
            -DCMAKE_CXX_COMPILER="$CXX_COMPILER" \
            -DCMAKE_INSTALL_PREFIX="$builddir/3rd" \
            "$@" \
            || fail "CMake failed in submodule $submodule"

        make -j "$(nproc)" -C "$builddir/submodules/$submodule" install \
            || fail "$submodule submodule build failed"

        touch "$builddir/submodules/$submodule/.easybuild_done"
    fi

}

install_headers() {
    mkdir -p "$builddir/3rd"
    cp "$@" "$builddir/3rd/"
}

gen_compodb() {
    local builddir="$1"

    echo "[" > ./compile_commands.json

    local targets="$(ls $builddir/.ezbld/*-command)"
    local count=$(echo "$targets" | wc -w);
    local idx=0

    for f in $targets; do
        idx=$((idx+1))
        local end_seq="},"
        [ $idx = $count ] && end_seq="}"

        . "$f"

        cat >> ./compile_commands.json <<EOF
{
  "directory": "$(pwd)/$builddir",
  "command": "$command",
  "file": "$source"
$end_seq
EOF
    done
    echo "]" >> ./compile_commands.json
}

asan_flags() {
    cat <<EOF
-fsanitize=address
-fno-omit-frame-pointer
EOF
}

_build() {
    local CXX_COMPILER="${CXX_COMPILER:=/usr/bin/g++-11}"
    local C_COMPILER="${C_COMPILER:=/usr/bin/gcc-11}"
    local builddir='./easybuild'
    local rebuild_submodules=false
    local compodb=false
    local debug=false
    local asan=false
    local android_abi=
    local android_platform=
    local android_ndk=
    local run_args=

    while [ -n "$1" ]; do
        case "$1" in
        --builddir=*)
            builddir="${1#*=}"
            [ "$debug" = true ] && builddir="$builddir-debug"
            [ "$asan" = true ] && builddir="$builddir-asan"
            ;;
        --rebuild-subs)
            rebuild_submodules=true
            ;;
        --compodb)
            compodb=true
            ;;
        --debug)
            debug=true
            builddir="$builddir-debug"
            ;;
        --asan)
            asan=true
            builddir="$builddir-asan"
            ;;
        --run)
            shift
            run_args="LD_LIBRARY_PATH='$builddir/3rd/lib:$builddir/3rd/lib64' $builddir/$@"
            break
            ;;
        --gdbrun)
            shift
            run_args="LD_LIBRARY_PATH='$builddir/3rd/lib:$builddir/3rd/lib64' gdb --args $builddir/$@"
            break
            ;;
        --android)
            android_abi=arm64-v8a
            android_platform=29
            android_ndk="$HOME/android-ndk-r23-beta6"
            [[ ! $builddir =~ *-android ]] && builddir="$builddir-android"
            ;;
        --android-abi=*)
            android_abi="${1#*=}"
            [[ ! $builddir =~ *-android ]] && builddir="$builddir-android"
            ;;
        --android-platform=*)
            android_platform="${1#*=}"
            [[ ! $builddir =~ *-android ]] && builddir="$builddir-android"
            ;;
        --android-ndk=*)
            android_ndk="${1#*=}"
            [[ ! $builddir =~ *-android ]] && builddir="$builddir-android"
            ;;
        *)
            TARGET+="$1"
            #fail "Unknown argument $1"
            ;;
        esac
        shift
    done

    local hardening_flags="
-fstrict-aliasing
-Wall
-Wextra
-Wpedantic
-Wcast-align
-Wconversion
-Wctor-dtor-privacy
-Wextra-semi
-Wfloat-equal
-Wnon-virtual-dtor
-Wold-style-cast
-Woverloaded-virtual
-Wredundant-decls
-Wsign-conversion
-Wsign-promo
-Werror=unused-result
-Wno-unused-function
-Wno-missing-braces
$([ "$asan" == true ] && asan_flags)
"

    mkdir -p "$builddir/3rd"
    mkdir -p "$builddir/.ezbld"

    build_cmake_submodule "$builddir" $rebuild_submodules SFML
    build_cmake_submodule "$builddir" $rebuild_submodules Catch2 -DCATCH_INSTALL_DOCS=OFF
    build_cmake_submodule "$builddir" $rebuild_submodules luacpp -DENABLE_TESTS=ON

    if [ ! -f "$builddir/submodules/boost/.easybuild_done" ] || [ "$rebuild_submodules" == true ]; then
        git submodule init submodules/boost || fail
        git submodule update --init --recursive submodules/boost || fail

        mkdir -p "$builddir/submodules/boost"
        rm -rf "$builddir/submodules/boost/*"
        pushd 'submodules/boost' &> /dev/null

        local variant=
        [ $debug = true ] && variant=debug || variant=release

        if [ ! -f ./b2 ]; then
            ./bootstrap.sh || fail
        fi
        sed -i "s|using gcc .*|using gcc : : $(basename "$CXX_COMPILER") ;|g" ./project-config.jam
        ./b2 \
            variant=$variant \
            link=static \
                --with-fiber \
                --with-coroutine \
            install \
                --no-cmake-config \
                --prefix="../../$builddir/3rd/" \
            || fail

        popd &> /dev/null

        touch "$builddir/submodules/boost/.easybuild_done"
    fi

    if [ ! -f "$builddir/3rd/include/nuklear.h" ]; then
        git submodule init submodules/Nuklear || fail ""
        git submodule update submodules/Nuklear || fail ""
        cp 'submodules/Nuklear/nuklear.h' "$builddir/3rd/include/"
    fi

    make_pch \
        src/stdafx.hpp \
        "$builddir" \
        "$CXX_COMPILER" \
        "$debug" \
        "$hardening_flags"

    build_static_lib \
        nuklear \
        src/nuklear.cpp \
        "$builddir" \
        "$CXX_COMPILER" \
        "$debug" \
        "$hardening_flags" \
        "-lsfml-system -lsfml-window -lsfml-graphics -lGL -lGLEW"

    codegen_step \
        "$builddir" \
        "$CXX_COMPILER" \
        src/net_actions.hpp \
        net_actions_generator \
        src/net_actions_generator.cpp \
        src/net_actions_generated.hpp

    codegen_step \
        "$builddir" \
        "$CXX_COMPILER" \
        "$builddir/3rd/include/SFML/Window/Keyboard.hpp" \
        sfml_key_generator \
        src/key_generator.cpp \
        src/key_generated.hpp

    codegen_step \
        "$builddir" \
        "$CXX_COMPILER" \
        "$builddir/3rd/include/SFML/Window/Event.hpp" \
        sfml_event_type_generator \
        src/event_type_generator.cpp \
        src/event_type_generated.hpp


    build_executable \
        dfdh \
        diefastdiehard.cpp \
        "$builddir" \
        "$CXX_COMPILER" \
        "$debug" \
        "$hardening_flags" \
        "-lboost_context -lboost_fiber -lnuklear -lsfml-system -lsfml-window -lsfml-graphics -lsfml-network -lsfml-audio -lpthread -lGL -lGLEW -lluajit-5.1"

    build_executable \
        cfg_test \
        tests/cfg_test.cpp \
        "$builddir" \
        "$CXX_COMPILER" \
        "$debug" \
        "$hardening_flags" \
        "-lboost_context -lboost_fiber -lpthread -lCatch2Main -lCatch2"


#    build_executable \
#        gui-test \
#        gui_test.cpp \
#        "$builddir" \
#        "$CXX_COMPILER" \
#        "$debug" \
#        "$hardening_flags" \
#        "-lnuklear -lsfml-system -lsfml-window -lsfml-graphics -lGL -lGLEW"

    [ "$compodb" = true ] && gen_compodb "$builddir"

    eval $run_args
}

_build "$@"
