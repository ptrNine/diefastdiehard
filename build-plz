#!/bin/bash

colored() {
    if [ -t 1 ]; then
        local black='0;30' red='0;31'     green='0;32'  orange='0;33' \
              blue='0;34'  purple='0;35'  cyan='0;36'   lgray='0;37' \
              dgray='1;30' lred='1;31'    lgreen='1;32' yellow='1;33' \
              lblue='1;34' lpurple='1;35' lcyan='1;36'  white='1;37'
        echo -en "\e[${!1}m$2\e[0m"
    else
        echo -n "$2"
    fi

    [ -z "$3" ] && echo
}

fail() {
    colored red "$1" 1>&2
    exit 1
}

progress() {
    while kill -0 "$1" &>/dev/null; do
        local tm="$(date +%S)"
        case $((tm%3)) in
            0)
                colored "$2" "$3 .  " ret
                ;;
            1)
                colored "$2" "$3 .. " ret
                ;;
            2)
                colored "$2" "$3 ..." ret
                ;;
        esac
        sleep 1
    done
    printf '\n'
}

mstime() {
    echo $(($(date +%s%N)/1000000))
}

measure() {
    local start_tm=$1
    echo "scale=2; $(($(mstime) - start_tm))/1000" | bc -l
}

declare -A INCLUDE_MAP

_include_scan() {
    local fname="$1"
    local cur_dir="$2"
    for f in $(cat "$fname" 2>/dev/null | grep -E "^[ \t]*#include[ \t]+\"" 2>/dev/null); do
        [ $f = '#include' ] && continue

        f="${f#*\"}"
        f="${f%*\"}"

        local current_fname="$cur_dir/$f"
        current_fname="${current_fname#./}"
        current_fname="${current_fname#/}"

        [ -z "${INCLUDE_MAP[$current_fname]}" ] && \
            INCLUDE_MAP["$current_fname"]=true || \
            continue

        echo "$current_fname"

        local current_dir="$(dirname "$current_fname")"
        current_dir="${current_dir#./}"

        _include_scan "$current_fname" "$current_dir"
    done | sort | uniq
}

include_scan() {
    echo "$1"
    _include_scan "$1" "$(dirname "$1")"
    declare -A INCLUDE_MAP
}

build_static_lib() {
    local name="$1"
    local build_source="$2"
    local builddir="$3"
    local CXX_COMPILER="$4"
    local debug="$5"
    local flags="$6"
    local libs="$7"

    local list="$builddir/.ezbld/$name-list" newlist="$builddir/.ezbld/new-$name-list"

    rm -f "$newlist"
    for f in $(include_scan "$build_source"); do
        stat --printf="%Y:%n\n" "$f" >> "$newlist"
    done

    if [ ! -f "$list" ] || \
        ! cmp --silent "$list" "$newlist"; then
        rm -f "$builddir/$name-list"

        local start_tm=$(mstime)
        colored yellow "Building lib$name.a ... " n

        local cmd="$(command -v "$CXX_COMPILER") -c -std=c++20 \
            $([ "$debug" == true ] && echo "-O0 -g" || echo "-O2 -march=native") \
            $flags \
            -L '$(pwd)/$builddir/3rd/lib' \
            -L '$(pwd)/$builddir/3rd/lib64' \
            -L '$(pwd)/$builddir' \
            -isystem '$(pwd)/$builddir/3rd/include' '$(pwd)/$build_source' \
            -o '$(pwd)/$builddir/$name.o' \
            $libs"
        cmd="$(echo "$cmd" | sed 's/  */ /g' | tr '\n' ' ')"

        eval $cmd || fail "Build failed"

        ar rcs "$(pwd)/$builddir/lib$name.a" "$(pwd)/$builddir/$name.o" || fail "Build failed"
        rm -f "$builddir/$name.o"

        mv -f "$newlist" "$list"
        printf '%s\n%s\n' "source=\"$(pwd)/$build_source\"" "command=\"$cmd\"" > "$builddir/.ezbld/$name-command"

        colored lgreen "done! $(measure $start_tm)s"
    else
        colored lpurple "lib$name.a already built"
        rm -f "$newlist"
    fi
}

build_executable() {
    local name="$1"
    local build_source="$2"
    local builddir="$3"
    local CXX_COMPILER="$4"
    local debug="$5"
    local flags="$6"
    local libs="$7"

    local list="$builddir/.ezbld/$name-list" newlist="$builddir/.ezbld/new-$name-list"

    rm -f "$newlist"
    for f in $(include_scan "$build_source"); do
        stat --printf="%Y:%n\n" "$f" >> "$newlist"
    done

    if [ ! -f "$list" ] || \
        ! cmp --silent "$list" "$newlist"; then
        rm -f "$list"

        local start_tm=$(mstime)
        colored yellow "Building $name ... " n
        local cmd="$(command -v "$CXX_COMPILER") -std=c++20 \
            $([ "$debug" == true ] && echo "-O0 -g" || echo "-O2 -march=native") \
            $flags \
            -L '$(pwd)/$builddir/3rd/lib' \
            -L '$(pwd)/$builddir/3rd/lib64' \
            -L '$(pwd)/$builddir' \
            -isystem '$(pwd)/$builddir/3rd/include' '$(pwd)/$build_source' \
            -o '$(pwd)/$builddir/$name' \
            $libs"
        cmd="$(echo "$cmd" | sed 's/  */ /g' | tr '\n' ' ')"

        eval $cmd || fail "Build failed"
        mv -f "$newlist" "$list"
        printf '%s\n%s\n' "source=\"$(pwd)/$build_source\"" "command=\"$cmd\"" > "$builddir/.ezbld/$name-command"

        colored lgreen "done! $(measure $start_tm)s"
    else
        colored lpurple "$name already built"
        rm -f "$newlist"
    fi
}

make_pch() {
    local location="$1"
    local builddir="$2"
    local CXX_COMPILER="$3"
    local debug="$4"
    local flags="$5"
    local name='PCH'

    [ -f "$location" ] || return 0

    local list="$builddir/.ezbld/$name-list" newlist="$builddir/.ezbld/new-$name-list"

    rm -f "$newlist"
    for f in $(include_scan "$location"); do
        stat --printf="%Y:%n\n" "$f" >> "$newlist"
    done

    if [ ! -f "$list" ] || \
        ! cmp --silent "$list" "$newlist" || \
        [ "$(cat "$location.gch.builddir" 2>/dev/null)" != "$builddir" ] || \
        [ ! -f "$location.gch" ]; then
        rm -f "$list"

        local start_tm=$(mstime)
        colored yellow "Making precompiled header $location ... " n
        local cmd="$(command -v "$CXX_COMPILER") -std=c++20 -c \
            $([ "$debug" == true ] && echo "-O0 -g" || echo "-O2 -march=native") \
            $flags \
            -L '$(pwd)/$builddir/3rd/lib' \
            -L '$(pwd)/$builddir/3rd/lib64' \
            -L '$(pwd)/$builddir' \
            -isystem '$(pwd)/$builddir/3rd/include' '$(pwd)/$location' \
            -o $location.gch"
        cmd="$(echo "$cmd" | sed 's/  */ /g' | tr '\n' ' ')"

        eval $cmd || fail " Failed"

        mv -f "$newlist" "$list"
        echo "$builddir" > "$location.gch.builddir"

        MAKED_PCH="$location"

        colored lgreen "done! $(measure $start_tm)s"
    else
        colored lpurple "$name already built"
        rm -f "$newlist"
    fi
}

gen_compodb() {
    local builddir="$1"

    echo "[" > ./compile_commands.json

    local targets="$(ls $builddir/.ezbld/*-command)"
    local count=$(echo "$targets" | wc -w);
    local idx=0

    for f in $targets; do
        idx=$((idx+1))
        local end_seq="},"
        [ $idx = $count ] && end_seq="}"

        . "$f"

        cat >> ./compile_commands.json <<EOF
{
  "directory": "$(pwd)/$builddir",
  "command": "$command",
  "file": "$source"
$end_seq
EOF
    done
    echo "]" >> ./compile_commands.json
}

_build() {
    local CXX_COMPILER="${CXX_COMPILER:=/usr/bin/g++-10}"
    local C_COMPILER="${C_COMPILER:=/usr/bin/gcc-10}"
    local builddir='./easybuild'
    local rebuild_submodules=false
    local compodb=false
    local debug=false
    local run_args=

    local hardening_flags="
-fstrict-aliasing
-Wall
-Wextra
-Wpedantic
-Wcast-align
-Wconversion
-Wctor-dtor-privacy
-Wextra-semi
-Wfloat-equal
-Wnon-virtual-dtor
-Wold-style-cast
-Woverloaded-virtual
-Wredundant-decls
-Wsign-conversion
-Wsign-promo
-Werror=unused-result
-Wno-unused-function
-Wno-missing-braces
"

    while [ -n "$1" ]; do
        case "$1" in
        --builddir=*)
            builddir="${1#*=}"
            [ "$debug" = true ] && builddir="$builddir-debug"
            ;;
        --rebuild-subs)
            rebuild_submodules=true
            ;;
        --compodb)
            compodb=true
            ;;
        --debug)
            debug=true
            builddir="$builddir-debug"
            ;;
        --run)
            shift
            run_args="LD_LIBRARY_PATH='$builddir/3rd/lib:$builddir/3rd/lib64' $builddir/$@"
            break
            ;;
        --gdbrun)
            shift
            run_args="LD_LIBRARY_PATH='$builddir/3rd/lib:$builddir/3rd/lib64' gdb --args $builddir/$@"
            break
            ;;
        *)
            fail "Unknown argument $1"
            ;;
        esac
        shift
    done

    mkdir -p "$builddir/3rd"
    mkdir -p "$builddir/.ezbld"
    mkdir -p "$builddir/submodules/SFML"

    if [ ! -f "$builddir/submodules/SFML/.easybuild_done" ] || [ "$rebuild_submodules" == true ]; then
        git submodule init submodules/SFML || fail ""
        git submodule update submodules/SFML || fail ""
        rm -f "$builddir/.easybuild-list"
        rm -f "$builddir/submodules/SFML/.easybuild_done"
        cmake submodules/SFML/ -B "$builddir/submodules/SFML" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER="$C_COMPILER" \
            -DCMAKE_CXX_COMPILER="$CXX_COMPILER" \
            -DCMAKE_INSTALL_PREFIX="$builddir/3rd" \
            || fail "SFML submodule cmake run failed"

        make -j "$(nproc)" -C "$builddir/submodules/SFML" install \
            || fail "SFML submodule build failed"

        touch "$builddir/submodules/SFML/.easybuild_done"
    fi

    if [ ! -f "$builddir/3rd/include/nuklear.h" ]; then
        git submodule init submodules/Nuklear || fail ""
        git submodule update submodules/Nuklear || fail ""
        cp 'submodules/Nuklear/nuklear.h' "$builddir/3rd/include/"
    fi

    make_pch \
        src/stdafx.hpp \
        "$builddir" \
        "$CXX_COMPILER" \
        "$debug" \
        "$hardening_flags"

    build_static_lib \
        nuklear \
        src/nuklear.cpp \
        "$builddir" \
        "$CXX_COMPILER" \
        "$debug" \
        "$hardening_flags" \
        "-lsfml-system -lsfml-window -lsfml-graphics -lGL -lGLEW"

    build_executable \
        dfdh \
        diefastdiehard.cpp \
        "$builddir" \
        "$CXX_COMPILER" \
        "$debug" \
        "$hardening_flags" \
        "-lnuklear -lsfml-system -lsfml-window -lsfml-graphics -lsfml-network -lpthread -lGL -lGLEW"

    build_executable \
        gui-test \
        gui_test.cpp \
        "$builddir" \
        "$CXX_COMPILER" \
        "$debug" \
        "$hardening_flags" \
        "-lnuklear -lsfml-system -lsfml-window -lsfml-graphics -lGL -lGLEW"

    [ "$compodb" = true ] && gen_compodb "$builddir"

    eval $run_args
}

_build "$@"
